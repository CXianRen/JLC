-- programs ------------------------------------------------

entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

Struct.    TopDef ::= "struct" Ident SBlk ";" ;

TypeDef.   TopDef ::= "typedef" "struct" Ident "*" Ident ";" ;

TypeDefWS. TopDef ::= "typedef" "struct" Ident SBlk "*" Ident ";" ;

Enum.      TopDef ::= "enum" Ident "{"[EVal]"}" ";" ;

Class.     TopDef ::= "class" Ident CBlk ;

ClassWE.   TopDef ::= "class" Ident "extends" Ident CBlk ;

GFuncDef.  TopDef ::= FnDef ;

FuncDef.   FnDef ::= Type Ident "(" [Arg] ")" Blk ;


EnumValue. EVal ::= Ident;
separator  EVal "," ;

Argument. Arg ::= Type Ident;
separator  Arg "," ;

separator nonempty TopDef "" ;


-- Type ----------------------------------------------
Int.       BType ::= "int" ;

Doub.      BType ::= "double" ;

Bool.      BType ::= "boolean" ;

Void.      BType ::= "void" ;

ObjT.      OType ::= Ident ;

Array.    AType ::= Type BracketsOpt ;

BaseType. Type ::= BType ;

ObjType.  Type ::= OType ;

ArrType.  Type ::= AType ;


BracketsEmpty.   BracketsOpt ::= "[]" ;
separator nonempty BracketsOpt "";

separator  Type "," ;

-- struct and class define ---------------------------------

SBlock.     SBlk ::= "{" [Memdef] "}" ;

CBlock.     CBlk ::= "{" [CMemdef] "}" ;

MemberItem. MemItem ::= Ident ;
separator  MemItem "," ;

MemberDef.  Memdef ::= Type [MemItem] ";" ;
separator Memdef "" ;

CVarDef.    CMemdef ::= Memdef ;
CFuncDef.   CMemdef ::= FnDef ;

separator CMemdef "" ;

-- function statements ----------------------------------------------

Block.     Blk ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Blk ;

-- define variable -----------------------------------------

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

SExp.      Stmt ::= Expr  ";" ;

separator nonempty Item "," ;

-- Access a variable ---------------------------------------
Ass.       Stmt ::= Expr "=" Expr ";" ;

-- Return --------------------------------------------------
Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

-- Condition and loop --------------------------------------
Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

ForLoop.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

-- Expr ----------------------------------------------------
Ecast.     Expr6 ::= "(" Type ")" Expr6 ;

ELitNull.  Expr6 ::= "null";

ELitInt.   Expr6 ::= Integer ;

ELitDoub.  Expr6 ::= Double ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EString.   Expr6 ::= String ;

EVar.      Expr6 ::= Ident ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

ENewObj.   Expr6 ::= "new" Ident; 

EArrow.    Expr6 ::= Expr6 "->" Ident ;

Epropety.  Expr6 ::= Expr6 "." Ident ;

EFunc.     Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;

Dim.       DimExpr ::= "[" Expr "]" ;
terminator nonempty DimExpr "" ;

ENewBArr.  Expr6 ::= "new" BType [DimExpr] ;

ENewOArr.  Expr6 ::= "new" OType [DimExpr] ;

EAcc.      Expr6 ::= Expr6 [DimExpr] ;

EInc.      Expr6 ::= Expr6 "++" ;

EDecr.     Expr6 ::= Expr6 "--" ;

ENeg.      Expr5 ::= "-" Expr6 ;

ENot.      Expr5 ::= "!" Expr5 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr3 ::= Expr2  "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr; 

coercions  Expr 6 ;
separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

