/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef __JLC_TYPE_CHECHER__
#define __JLC_TYPE_CHECHER__
/* You might want to change the above name. */

#include "Absyn.H"
#include "context.H"
#include "Skeleton.H"

class JLCTypeChecker : public Skeleton
{
public:
  JLCContext globalContext;
  JLCType temp_type;

  std::string temp_exp_type;
  bool isReturnStmt;
  op_enum temp_op;

  JLCTypeChecker() : temp_exp_type("DEFAULT"), isReturnStmt(false) {}

  JLCTypeChecker(JLCContext context) : globalContext(context), temp_exp_type("DEFAULT"), isReturnStmt(false) {}

public:
  // void visitProgram(Program *p);
  void visitFnDef(FnDef *p);
  // void visitArgument(Argument *p);
  void visitBlock(Block *p);
  // void visitEmpty(Empty *p);
  // void visitBStmt(BStmt *p);
  void visitDecl(Decl *p);
  void visitNoInit(NoInit *p);
  void visitInit(Init *p);
  void visitAss(Ass *p);
  // void visitArrayAss(ArrayAss *p);
  void visitIncr(Incr *p);
  void visitDecr(Decr *p);
  void visitRet(Ret *p);
  void visitVRet(VRet *p);
  void visitCond(Cond *p);
  void visitCondElse(CondElse *p);
  void visitWhile(While *p);
  void visitSExp(SExp *p);
  void visitInt(Int *p);
  void visitDoub(Doub *p);
  void visitBool(Bool *p);
  void visitVoid(Void *p);
  // void visitIntArray(IntArray *p);
  // void visitDoubArray(DoubArray *p);
  // void visitBoolArray(BoolArray *p);
  void visitFun(Fun *p);
  void visitEVar(EVar *p);
  // void visitEArrayLen(EArrayLen *p);
  // void visitEArrayNew(EArrayNew *p);
  // void visitEArray(EArray *p);
  void visitELitInt(ELitInt *p);
  void visitELitDoub(ELitDoub *p);
  void visitELitTrue(ELitTrue *p);
  void visitELitFalse(ELitFalse *p);
  void visitEApp(EApp *p);
  void visitEString(EString *p);
  void visitNeg(Neg *p);
  void visitNot(Not *p);
  void visitEMul(EMul *p);
  void visitEAdd(EAdd *p);
  void visitERel(ERel *p);
  void visitEAnd(EAnd *p);
  void visitEOr(EOr *p);
  // void visitPlus(Plus *p);
  // void visitMinus(Minus *p);
  void visitTimes(Times *p);
  void visitDiv(Div *p);
  void visitMod(Mod *p);
  void visitLTH(LTH *p);
  void visitLE(LE *p);
  void visitGTH(GTH *p);
  void visitGE(GE *p);
  void visitEQU(EQU *p);
  void visitNE(NE *p);
  // void visitListTopDef(ListTopDef *p);
  // void visitListArg(ListArg *p);
  void visitListStmt(ListStmt *p);
  // void visitListItem(ListItem *p);
  // void visitListType(ListType *p);
  // void visitListExpr(ListExpr *p);

  // void visitInteger(Integer x);
  // void visitChar(Char x);
  // void visitDouble(Double x);
  // void visitString(String x);
  // void visitIdent(Ident x);

  // for array
  // void visitBracketsOpt(BracketsOpt *p);
  // void visitDimExpr(DimExpr *p);
  void visitAssArr(AssArr *p);
  void visitArrayType(ArrayType *p);
  // void visitBracketsEmpty(BracketsEmpty *p);
  void visitENewArray(ENewArray *p);
  void visitDim(Dim *p);
  void visitEDot(EDot *p);
  void visitEAcc(EAcc *p);
  // void visitListBracketsOpt(ListBracketsOpt *p);
  // void visitListDimExpr(ListDimExpr *p);
  void visitForLoop(ForLoop *p);

  // for struct(pointer)
  // void visitTypeDef(TypeDef *p);
  // void visitStructDef(StructDef *p);
  void visitFnDefS(FnDefS *p); // function with struct return type
  // void visitPtrgument(Ptrgument *p); // pointer argument

  void visitDeclObjPtr(DeclObjPtr *p);
  // void visitSStmt(SStmt *p);
  // void visitMAccOp(MAccOp *p);
  void visitForStruct(ForStruct *p);
  // void visitMInner(MInner *p);
  // void visitMArray(MArray *p);
  // void visitMpoint(Mpoint *p);
  void visitSArrayType(SArrayType *p);
  void visitENewSArray(ENewSArray *p);
  void visitENewStruct(ENewStruct *p);
  void visitEMember(EMember *p);
  void visitTypeCast(TypeCast *p);
  // void visitMAcc(MAcc *p);
  // void visitListSStmt(ListSStmt *p);
};

#endif
