/* -*- c -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.h"

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the javalette_lloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.h"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE javalette__scan_string(const char *str, yyscan_t scanner);
extern void javalette__delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void javalette_lex_destroy(yyscan_t scanner);
extern char* javalette_get_text(yyscan_t scanner);

extern yyscan_t javalette__initialize_lexer(FILE * inp);

/* List reversal functions. */
ListTopDef reverseListTopDef(ListTopDef l)
{
  ListTopDef prev = 0;
  ListTopDef tmp = 0;
  while (l)
  {
    tmp = l->listtopdef_;
    l->listtopdef_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListArg reverseListArg(ListArg l)
{
  ListArg prev = 0;
  ListArg tmp = 0;
  while (l)
  {
    tmp = l->listarg_;
    l->listarg_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStmt reverseListStmt(ListStmt l)
{
  ListStmt prev = 0;
  ListStmt tmp = 0;
  while (l)
  {
    tmp = l->liststmt_;
    l->liststmt_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListItem reverseListItem(ListItem l)
{
  ListItem prev = 0;
  ListItem tmp = 0;
  while (l)
  {
    tmp = l->listitem_;
    l->listitem_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListType reverseListType(ListType l)
{
  ListType prev = 0;
  ListType tmp = 0;
  while (l)
  {
    tmp = l->listtype_;
    l->listtype_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListExpr reverseListExpr(ListExpr l)
{
  ListExpr prev = 0;
  ListExpr tmp = 0;
  while (l)
  {
    tmp = l->listexpr_;
    l->listexpr_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Prog prog_;
  TopDef topdef_;
  ListTopDef listtopdef_;
  Arg arg_;
  ListArg listarg_;
  Blk blk_;
  ListStmt liststmt_;
  Stmt stmt_;
  Item item_;
  ListItem listitem_;
  Type type_;
  ListType listtype_;
  Expr expr_;
  ListExpr listexpr_;
  AddOp addop_;
  MulOp mulop_;
  RelOp relop_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, javalette_get_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _BANG        /* ! */
%token          _BANGEQ      /* != */
%token          _PERCENT     /* % */
%token          _DAMP        /* && */
%token          _LPAREN      /* ( */
%token          _RPAREN      /* ) */
%token          _STAR        /* * */
%token          _PLUS        /* + */
%token          _DPLUS       /* ++ */
%token          _COMMA       /* , */
%token          _MINUS       /* - */
%token          _DMINUS      /* -- */
%token          _SLASH       /* / */
%token          _SEMI        /* ; */
%token          _LT          /* < */
%token          _LDARROW     /* <= */
%token          _EQ          /* = */
%token          _DEQ         /* == */
%token          _GT          /* > */
%token          _GTEQ        /* >= */
%token          _KW_boolean  /* boolean */
%token          _KW_double   /* double */
%token          _KW_else     /* else */
%token          _KW_false    /* false */
%token          _KW_if       /* if */
%token          _KW_int      /* int */
%token          _KW_return   /* return */
%token          _KW_true     /* true */
%token          _KW_void     /* void */
%token          _KW_while    /* while */
%token          _LBRACE      /* { */
%token          _DBAR        /* || */
%token          _RBRACE      /* } */
%token<_string> _STRING_
%token<_int>    _INTEGER_
%token<_double> _DOUBLE_
%token<_string> _IDENT_

%type <prog_> Prog
%type <topdef_> TopDef
%type <listtopdef_> ListTopDef
%type <arg_> Arg
%type <listarg_> ListArg
%type <blk_> Blk
%type <liststmt_> ListStmt
%type <stmt_> Stmt
%type <item_> Item
%type <listitem_> ListItem
%type <type_> Type
%type <listtype_> ListType
%type <expr_> Expr6
%type <expr_> Expr5
%type <expr_> Expr4
%type <expr_> Expr3
%type <expr_> Expr2
%type <expr_> Expr1
%type <expr_> Expr
%type <listexpr_> ListExpr
%type <addop_> AddOp
%type <mulop_> MulOp
%type <relop_> RelOp

%start Prog

%%

Prog : ListTopDef { $$ = make_Program($1); result->prog_ = $$; }
;
TopDef : Type _IDENT_ _LPAREN ListArg _RPAREN Blk { $$ = make_FnDef($1, $2, $4, $6); }
;
ListTopDef : TopDef { $$ = make_ListTopDef($1, 0); }
  | TopDef ListTopDef { $$ = make_ListTopDef($1, $2); }
;
Arg : Type _IDENT_ { $$ = make_Argument($1, $2); }
;
ListArg : /* empty */ { $$ = 0; }
  | Arg { $$ = make_ListArg($1, 0); }
  | Arg _COMMA ListArg { $$ = make_ListArg($1, $3); }
;
Blk : _LBRACE ListStmt _RBRACE { $$ = make_Block(reverseListStmt($2)); }
;
ListStmt : /* empty */ { $$ = 0; }
  | ListStmt Stmt { $$ = make_ListStmt($2, $1); }
;
Stmt : _SEMI { $$ = make_Empty(); }
  | Blk { $$ = make_BStmt($1); }
  | Type ListItem _SEMI { $$ = make_Decl($1, $2); }
  | _IDENT_ _EQ Expr _SEMI { $$ = make_Ass($1, $3); }
  | _IDENT_ _DPLUS _SEMI { $$ = make_Incr($1); }
  | _IDENT_ _DMINUS _SEMI { $$ = make_Decr($1); }
  | _KW_return Expr _SEMI { $$ = make_Ret($2); }
  | _KW_return _SEMI { $$ = make_VRet(); }
  | _KW_if _LPAREN Expr _RPAREN Stmt { $$ = make_Cond($3, $5); }
  | _KW_if _LPAREN Expr _RPAREN Stmt _KW_else Stmt { $$ = make_CondElse($3, $5, $7); }
  | _KW_while _LPAREN Expr _RPAREN Stmt { $$ = make_While($3, $5); }
  | Expr _SEMI { $$ = make_SExp($1); }
;
Item : _IDENT_ { $$ = make_NoInit($1); }
  | _IDENT_ _EQ Expr { $$ = make_Init($1, $3); }
;
ListItem : Item { $$ = make_ListItem($1, 0); }
  | Item _COMMA ListItem { $$ = make_ListItem($1, $3); }
;
Type : _KW_int { $$ = make_Int(); }
  | _KW_double { $$ = make_Doub(); }
  | _KW_boolean { $$ = make_Bool(); }
  | _KW_void { $$ = make_Void(); }
;
ListType : /* empty */ { $$ = 0; }
  | Type { $$ = make_ListType($1, 0); }
  | Type _COMMA ListType { $$ = make_ListType($1, $3); }
;
Expr6 : _IDENT_ { $$ = make_EVar($1); }
  | _INTEGER_ { $$ = make_ELitInt($1); }
  | _DOUBLE_ { $$ = make_ELitDoub($1); }
  | _KW_true { $$ = make_ELitTrue(); }
  | _KW_false { $$ = make_ELitFalse(); }
  | _IDENT_ _LPAREN ListExpr _RPAREN { $$ = make_EApp($1, $3); }
  | _STRING_ { $$ = make_EString($1); }
  | _LPAREN Expr _RPAREN { $$ = $2; }
;
Expr5 : _MINUS Expr6 { $$ = make_Neg($2); }
  | _BANG Expr6 { $$ = make_Not($2); }
  | Expr6 { $$ = $1; }
;
Expr4 : Expr4 MulOp Expr5 { $$ = make_EMul($1, $2, $3); }
  | Expr5 { $$ = $1; }
;
Expr3 : Expr3 AddOp Expr4 { $$ = make_EAdd($1, $2, $3); }
  | Expr4 { $$ = $1; }
;
Expr2 : Expr2 RelOp Expr3 { $$ = make_ERel($1, $2, $3); }
  | Expr3 { $$ = $1; }
;
Expr1 : Expr2 _DAMP Expr1 { $$ = make_EAnd($1, $3); }
  | Expr2 { $$ = $1; }
;
Expr : Expr1 _DBAR Expr { $$ = make_EOr($1, $3); }
  | Expr1 { $$ = $1; }
;
ListExpr : /* empty */ { $$ = 0; }
  | Expr { $$ = make_ListExpr($1, 0); }
  | Expr _COMMA ListExpr { $$ = make_ListExpr($1, $3); }
;
AddOp : _PLUS { $$ = make_Plus(); }
  | _MINUS { $$ = make_Minus(); }
;
MulOp : _STAR { $$ = make_Times(); }
  | _SLASH { $$ = make_Div(); }
  | _PERCENT { $$ = make_Mod(); }
;
RelOp : _LT { $$ = make_LTH(); }
  | _LDARROW { $$ = make_LE(); }
  | _GT { $$ = make_GTH(); }
  | _GTEQ { $$ = make_GE(); }
  | _DEQ { $$ = make_EQU(); }
  | _BANGEQ { $$ = make_NE(); }
;

%%


/* Entrypoint: parse Prog from file. */
Prog pProg(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = javalette__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  javalette_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.prog_;
  }
}

/* Entrypoint: parse Prog from string. */
Prog psProg(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = javalette__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = javalette__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  javalette__delete_buffer(buf, scanner);
  javalette_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.prog_;
  }
}



