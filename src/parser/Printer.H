/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>


/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProg(Prog *p); /* abstract class */
  void visitProgram(Program *p);
  void visitTopDef(TopDef *p); /* abstract class */
  void visitStruct(Struct *p);
  void visitTypeDef(TypeDef *p);
  void visitTypeDefWS(TypeDefWS *p);
  void visitEnum(Enum *p);
  void visitClass(Class *p);
  void visitClassWE(ClassWE *p);
  void visitGFuncDef(GFuncDef *p);
  void visitFnDef(FnDef *p); /* abstract class */
  void visitFuncDef(FuncDef *p);
  void visitEVal(EVal *p); /* abstract class */
  void visitEnumValue(EnumValue *p);
  void visitListEVal(ListEVal *p);
  void iterListEVal(ListEVal::const_iterator i, ListEVal::const_iterator j);
  void visitArg(Arg *p); /* abstract class */
  void visitArgument(Argument *p);
  void visitListArg(ListArg *p);
  void iterListArg(ListArg::const_iterator i, ListArg::const_iterator j);
  void visitListTopDef(ListTopDef *p);
  void iterListTopDef(ListTopDef::const_iterator i, ListTopDef::const_iterator j);
  void visitType(Type *p); /* abstract class */
  void visitInt(Int *p);
  void visitDoub(Doub *p);
  void visitBool(Bool *p);
  void visitVoid(Void *p);
  void visitObjT(ObjT *p);
  void visitArray(Array *p);
  void visitBracketsOpt(BracketsOpt *p); /* abstract class */
  void visitBracketsEmpty(BracketsEmpty *p);
  void visitListBracketsOpt(ListBracketsOpt *p);
  void iterListBracketsOpt(ListBracketsOpt::const_iterator i, ListBracketsOpt::const_iterator j);
  void visitListType(ListType *p);
  void iterListType(ListType::const_iterator i, ListType::const_iterator j);
  void visitSBlk(SBlk *p); /* abstract class */
  void visitSBlock(SBlock *p);
  void visitCBlk(CBlk *p); /* abstract class */
  void visitCBlock(CBlock *p);
  void visitMemdef(Memdef *p); /* abstract class */
  void visitMemberDef(MemberDef *p);
  void visitListMemdef(ListMemdef *p);
  void iterListMemdef(ListMemdef::const_iterator i, ListMemdef::const_iterator j);
  void visitCMemdef(CMemdef *p); /* abstract class */
  void visitCVarDef(CVarDef *p);
  void visitCFuncDef(CFuncDef *p);
  void visitListCMemdef(ListCMemdef *p);
  void iterListCMemdef(ListCMemdef::const_iterator i, ListCMemdef::const_iterator j);
  void visitBlk(Blk *p); /* abstract class */
  void visitBlock(Block *p);
  void visitListStmt(ListStmt *p);
  void iterListStmt(ListStmt::const_iterator i, ListStmt::const_iterator j);
  void visitStmt(Stmt *p); /* abstract class */
  void visitEmpty(Empty *p);
  void visitBStmt(BStmt *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProg(Prog *p); /* abstract class */
  void visitProgram(Program *p);
  void visitTopDef(TopDef *p); /* abstract class */
  void visitStruct(Struct *p);
  void visitTypeDef(TypeDef *p);
  void visitTypeDefWS(TypeDefWS *p);
  void visitEnum(Enum *p);
  void visitClass(Class *p);
  void visitClassWE(ClassWE *p);
  void visitGFuncDef(GFuncDef *p);
  void visitFnDef(FnDef *p); /* abstract class */
  void visitFuncDef(FuncDef *p);
  void visitEVal(EVal *p); /* abstract class */
  void visitEnumValue(EnumValue *p);
  void visitListEVal(ListEVal *p);
  void iterListEVal(ListEVal::const_iterator i, ListEVal::const_iterator j);
  void visitArg(Arg *p); /* abstract class */
  void visitArgument(Argument *p);
  void visitListArg(ListArg *p);
  void iterListArg(ListArg::const_iterator i, ListArg::const_iterator j);
  void visitListTopDef(ListTopDef *p);
  void iterListTopDef(ListTopDef::const_iterator i, ListTopDef::const_iterator j);
  void visitType(Type *p); /* abstract class */
  void visitInt(Int *p);
  void visitDoub(Doub *p);
  void visitBool(Bool *p);
  void visitVoid(Void *p);
  void visitObjT(ObjT *p);
  void visitArray(Array *p);
  void visitBracketsOpt(BracketsOpt *p); /* abstract class */
  void visitBracketsEmpty(BracketsEmpty *p);
  void visitListBracketsOpt(ListBracketsOpt *p);
  void iterListBracketsOpt(ListBracketsOpt::const_iterator i, ListBracketsOpt::const_iterator j);
  void visitListType(ListType *p);
  void iterListType(ListType::const_iterator i, ListType::const_iterator j);
  void visitSBlk(SBlk *p); /* abstract class */
  void visitSBlock(SBlock *p);
  void visitCBlk(CBlk *p); /* abstract class */
  void visitCBlock(CBlock *p);
  void visitMemdef(Memdef *p); /* abstract class */
  void visitMemberDef(MemberDef *p);
  void visitListMemdef(ListMemdef *p);
  void iterListMemdef(ListMemdef::const_iterator i, ListMemdef::const_iterator j);
  void visitCMemdef(CMemdef *p); /* abstract class */
  void visitCVarDef(CVarDef *p);
  void visitCFuncDef(CFuncDef *p);
  void visitListCMemdef(ListCMemdef *p);
  void iterListCMemdef(ListCMemdef::const_iterator i, ListCMemdef::const_iterator j);
  void visitBlk(Blk *p); /* abstract class */
  void visitBlock(Block *p);
  void visitListStmt(ListStmt *p);
  void iterListStmt(ListStmt::const_iterator i, ListStmt::const_iterator j);
  void visitStmt(Stmt *p); /* abstract class */
  void visitEmpty(Empty *p);
  void visitBStmt(BStmt *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};




#endif

