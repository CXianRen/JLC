/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Prog;
class TopDef;
class FnDef;
class EVal;
class Arg;
class Type;
class BracketsOpt;
class SBlk;
class CBlk;
class Memdef;
class CMemdef;
class Blk;
class Stmt;
class Program;
class Struct;
class TypeDef;
class TypeDefWS;
class Enum;
class Class;
class ClassWE;
class GFuncDef;
class FuncDef;
class EnumValue;
class Argument;
class Int;
class Doub;
class Bool;
class Void;
class ObjT;
class Array;
class BracketsEmpty;
class SBlock;
class CBlock;
class MemberDef;
class CVarDef;
class CFuncDef;
class Block;
class Empty;
class BStmt;
class ListEVal;
class ListArg;
class ListTopDef;
class ListBracketsOpt;
class ListType;
class ListMemdef;
class ListCMemdef;
class ListStmt;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProg(Prog *p) = 0;
  virtual void visitTopDef(TopDef *p) = 0;
  virtual void visitFnDef(FnDef *p) = 0;
  virtual void visitEVal(EVal *p) = 0;
  virtual void visitArg(Arg *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitBracketsOpt(BracketsOpt *p) = 0;
  virtual void visitSBlk(SBlk *p) = 0;
  virtual void visitCBlk(CBlk *p) = 0;
  virtual void visitMemdef(Memdef *p) = 0;
  virtual void visitCMemdef(CMemdef *p) = 0;
  virtual void visitBlk(Blk *p) = 0;
  virtual void visitStmt(Stmt *p) = 0;
  virtual void visitProgram(Program *p) = 0;
  virtual void visitStruct(Struct *p) = 0;
  virtual void visitTypeDef(TypeDef *p) = 0;
  virtual void visitTypeDefWS(TypeDefWS *p) = 0;
  virtual void visitEnum(Enum *p) = 0;
  virtual void visitClass(Class *p) = 0;
  virtual void visitClassWE(ClassWE *p) = 0;
  virtual void visitGFuncDef(GFuncDef *p) = 0;
  virtual void visitFuncDef(FuncDef *p) = 0;
  virtual void visitEnumValue(EnumValue *p) = 0;
  virtual void visitArgument(Argument *p) = 0;
  virtual void visitInt(Int *p) = 0;
  virtual void visitDoub(Doub *p) = 0;
  virtual void visitBool(Bool *p) = 0;
  virtual void visitVoid(Void *p) = 0;
  virtual void visitObjT(ObjT *p) = 0;
  virtual void visitArray(Array *p) = 0;
  virtual void visitBracketsEmpty(BracketsEmpty *p) = 0;
  virtual void visitSBlock(SBlock *p) = 0;
  virtual void visitCBlock(CBlock *p) = 0;
  virtual void visitMemberDef(MemberDef *p) = 0;
  virtual void visitCVarDef(CVarDef *p) = 0;
  virtual void visitCFuncDef(CFuncDef *p) = 0;
  virtual void visitBlock(Block *p) = 0;
  virtual void visitEmpty(Empty *p) = 0;
  virtual void visitBStmt(BStmt *p) = 0;
  virtual void visitListEVal(ListEVal *p) = 0;
  virtual void visitListArg(ListArg *p) = 0;
  virtual void visitListTopDef(ListTopDef *p) = 0;
  virtual void visitListBracketsOpt(ListBracketsOpt *p) = 0;
  virtual void visitListType(ListType *p) = 0;
  virtual void visitListMemdef(ListMemdef *p) = 0;
  virtual void visitListCMemdef(ListCMemdef *p) = 0;
  virtual void visitListStmt(ListStmt *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Prog : public Visitable
{
public:
  virtual Prog *clone() const = 0;

};

class TopDef : public Visitable
{
public:
  virtual TopDef *clone() const = 0;

};

class FnDef : public Visitable
{
public:
  virtual FnDef *clone() const = 0;

};

class EVal : public Visitable
{
public:
  virtual EVal *clone() const = 0;

};

class Arg : public Visitable
{
public:
  virtual Arg *clone() const = 0;

};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;

};

class BracketsOpt : public Visitable
{
public:
  virtual BracketsOpt *clone() const = 0;

};

class SBlk : public Visitable
{
public:
  virtual SBlk *clone() const = 0;

};

class CBlk : public Visitable
{
public:
  virtual CBlk *clone() const = 0;

};

class Memdef : public Visitable
{
public:
  virtual Memdef *clone() const = 0;

};

class CMemdef : public Visitable
{
public:
  virtual CMemdef *clone() const = 0;

};

class Blk : public Visitable
{
public:
  virtual Blk *clone() const = 0;

};

class Stmt : public Visitable
{
public:
  virtual Stmt *clone() const = 0;

};



class Program : public Prog
{
public:
  ListTopDef *listtopdef_;

  Program(const Program &);
  Program &operator=(const Program &);
  Program(ListTopDef *p1);
  ~Program();
  virtual void accept(Visitor *v);
  virtual Program *clone() const;
  void swap(Program &);
};

class Struct : public TopDef
{
public:
  Ident ident_;
  SBlk *sblk_;

  Struct(const Struct &);
  Struct &operator=(const Struct &);
  Struct(Ident p1, SBlk *p2);
  ~Struct();
  virtual void accept(Visitor *v);
  virtual Struct *clone() const;
  void swap(Struct &);
};

class TypeDef : public TopDef
{
public:
  Ident ident_1;
  Ident ident_2;

  TypeDef(const TypeDef &);
  TypeDef &operator=(const TypeDef &);
  TypeDef(Ident p1, Ident p2);
  ~TypeDef();
  virtual void accept(Visitor *v);
  virtual TypeDef *clone() const;
  void swap(TypeDef &);
};

class TypeDefWS : public TopDef
{
public:
  Ident ident_1;
  SBlk *sblk_;
  Ident ident_2;

  TypeDefWS(const TypeDefWS &);
  TypeDefWS &operator=(const TypeDefWS &);
  TypeDefWS(Ident p1, SBlk *p2, Ident p3);
  ~TypeDefWS();
  virtual void accept(Visitor *v);
  virtual TypeDefWS *clone() const;
  void swap(TypeDefWS &);
};

class Enum : public TopDef
{
public:
  Ident ident_;
  ListEVal *listeval_;

  Enum(const Enum &);
  Enum &operator=(const Enum &);
  Enum(Ident p1, ListEVal *p2);
  ~Enum();
  virtual void accept(Visitor *v);
  virtual Enum *clone() const;
  void swap(Enum &);
};

class Class : public TopDef
{
public:
  Ident ident_;
  CBlk *cblk_;

  Class(const Class &);
  Class &operator=(const Class &);
  Class(Ident p1, CBlk *p2);
  ~Class();
  virtual void accept(Visitor *v);
  virtual Class *clone() const;
  void swap(Class &);
};

class ClassWE : public TopDef
{
public:
  Ident ident_1;
  Ident ident_2;
  CBlk *cblk_;

  ClassWE(const ClassWE &);
  ClassWE &operator=(const ClassWE &);
  ClassWE(Ident p1, Ident p2, CBlk *p3);
  ~ClassWE();
  virtual void accept(Visitor *v);
  virtual ClassWE *clone() const;
  void swap(ClassWE &);
};

class GFuncDef : public TopDef
{
public:
  FnDef *fndef_;

  GFuncDef(const GFuncDef &);
  GFuncDef &operator=(const GFuncDef &);
  GFuncDef(FnDef *p1);
  ~GFuncDef();
  virtual void accept(Visitor *v);
  virtual GFuncDef *clone() const;
  void swap(GFuncDef &);
};

class FuncDef : public FnDef
{
public:
  Type *type_;
  Ident ident_;
  ListArg *listarg_;
  Blk *blk_;

  FuncDef(const FuncDef &);
  FuncDef &operator=(const FuncDef &);
  FuncDef(Type *p1, Ident p2, ListArg *p3, Blk *p4);
  ~FuncDef();
  virtual void accept(Visitor *v);
  virtual FuncDef *clone() const;
  void swap(FuncDef &);
};

class EnumValue : public EVal
{
public:
  Ident ident_;

  EnumValue(const EnumValue &);
  EnumValue &operator=(const EnumValue &);
  EnumValue(Ident p1);
  ~EnumValue();
  virtual void accept(Visitor *v);
  virtual EnumValue *clone() const;
  void swap(EnumValue &);
};

class Argument : public Arg
{
public:
  Type *type_;
  Ident ident_;

  Argument(const Argument &);
  Argument &operator=(const Argument &);
  Argument(Type *p1, Ident p2);
  ~Argument();
  virtual void accept(Visitor *v);
  virtual Argument *clone() const;
  void swap(Argument &);
};

class Int : public Type
{
public:

  Int(const Int &);
  Int &operator=(const Int &);
  Int();
  ~Int();
  virtual void accept(Visitor *v);
  virtual Int *clone() const;
  void swap(Int &);
};

class Doub : public Type
{
public:

  Doub(const Doub &);
  Doub &operator=(const Doub &);
  Doub();
  ~Doub();
  virtual void accept(Visitor *v);
  virtual Doub *clone() const;
  void swap(Doub &);
};

class Bool : public Type
{
public:

  Bool(const Bool &);
  Bool &operator=(const Bool &);
  Bool();
  ~Bool();
  virtual void accept(Visitor *v);
  virtual Bool *clone() const;
  void swap(Bool &);
};

class Void : public Type
{
public:

  Void(const Void &);
  Void &operator=(const Void &);
  Void();
  ~Void();
  virtual void accept(Visitor *v);
  virtual Void *clone() const;
  void swap(Void &);
};

class ObjT : public Type
{
public:
  Ident ident_;

  ObjT(const ObjT &);
  ObjT &operator=(const ObjT &);
  ObjT(Ident p1);
  ~ObjT();
  virtual void accept(Visitor *v);
  virtual ObjT *clone() const;
  void swap(ObjT &);
};

class Array : public Type
{
public:
  Type *type_;
  BracketsOpt *bracketsopt_;

  Array(const Array &);
  Array &operator=(const Array &);
  Array(Type *p1, BracketsOpt *p2);
  ~Array();
  virtual void accept(Visitor *v);
  virtual Array *clone() const;
  void swap(Array &);
};

class BracketsEmpty : public BracketsOpt
{
public:

  BracketsEmpty(const BracketsEmpty &);
  BracketsEmpty &operator=(const BracketsEmpty &);
  BracketsEmpty();
  ~BracketsEmpty();
  virtual void accept(Visitor *v);
  virtual BracketsEmpty *clone() const;
  void swap(BracketsEmpty &);
};

class SBlock : public SBlk
{
public:
  ListMemdef *listmemdef_;

  SBlock(const SBlock &);
  SBlock &operator=(const SBlock &);
  SBlock(ListMemdef *p1);
  ~SBlock();
  virtual void accept(Visitor *v);
  virtual SBlock *clone() const;
  void swap(SBlock &);
};

class CBlock : public CBlk
{
public:
  ListCMemdef *listcmemdef_;

  CBlock(const CBlock &);
  CBlock &operator=(const CBlock &);
  CBlock(ListCMemdef *p1);
  ~CBlock();
  virtual void accept(Visitor *v);
  virtual CBlock *clone() const;
  void swap(CBlock &);
};

class MemberDef : public Memdef
{
public:
  Type *type_;
  Ident ident_;

  MemberDef(const MemberDef &);
  MemberDef &operator=(const MemberDef &);
  MemberDef(Type *p1, Ident p2);
  ~MemberDef();
  virtual void accept(Visitor *v);
  virtual MemberDef *clone() const;
  void swap(MemberDef &);
};

class CVarDef : public CMemdef
{
public:
  Memdef *memdef_;

  CVarDef(const CVarDef &);
  CVarDef &operator=(const CVarDef &);
  CVarDef(Memdef *p1);
  ~CVarDef();
  virtual void accept(Visitor *v);
  virtual CVarDef *clone() const;
  void swap(CVarDef &);
};

class CFuncDef : public CMemdef
{
public:
  FnDef *fndef_;

  CFuncDef(const CFuncDef &);
  CFuncDef &operator=(const CFuncDef &);
  CFuncDef(FnDef *p1);
  ~CFuncDef();
  virtual void accept(Visitor *v);
  virtual CFuncDef *clone() const;
  void swap(CFuncDef &);
};

class Block : public Blk
{
public:
  ListStmt *liststmt_;

  Block(const Block &);
  Block &operator=(const Block &);
  Block(ListStmt *p1);
  ~Block();
  virtual void accept(Visitor *v);
  virtual Block *clone() const;
  void swap(Block &);
};

class Empty : public Stmt
{
public:

  Empty(const Empty &);
  Empty &operator=(const Empty &);
  Empty();
  ~Empty();
  virtual void accept(Visitor *v);
  virtual Empty *clone() const;
  void swap(Empty &);
};

class BStmt : public Stmt
{
public:
  Blk *blk_;

  BStmt(const BStmt &);
  BStmt &operator=(const BStmt &);
  BStmt(Blk *p1);
  ~BStmt();
  virtual void accept(Visitor *v);
  virtual BStmt *clone() const;
  void swap(BStmt &);
};



class ListEVal : public Visitable, public std::vector<EVal*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListEVal *clone() const;
};

ListEVal* consListEVal(EVal* x, ListEVal* xs);

class ListArg : public Visitable, public std::vector<Arg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListArg *clone() const;
};

ListArg* consListArg(Arg* x, ListArg* xs);

class ListTopDef : public Visitable, public std::vector<TopDef*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListTopDef *clone() const;
};

ListTopDef* consListTopDef(TopDef* x, ListTopDef* xs);

class ListBracketsOpt : public Visitable, public std::vector<BracketsOpt*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListBracketsOpt *clone() const;
};

ListBracketsOpt* consListBracketsOpt(BracketsOpt* x, ListBracketsOpt* xs);

class ListType : public Visitable, public std::vector<Type*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListType *clone() const;
};

ListType* consListType(Type* x, ListType* xs);

class ListMemdef : public Visitable, public std::vector<Memdef*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListMemdef *clone() const;
};

ListMemdef* consListMemdef(Memdef* x, ListMemdef* xs);

class ListCMemdef : public Visitable, public std::vector<CMemdef*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListCMemdef *clone() const;
};

ListCMemdef* consListCMemdef(CMemdef* x, ListCMemdef* xs);

class ListStmt : public Visitable, public std::vector<Stmt*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStmt *clone() const;
};

ListStmt* consListStmt(Stmt* x, ListStmt* xs);





#endif
