/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"


class Skeleton : public Visitor
{
public:
  void visitProg(Prog *p);
  void visitTopDef(TopDef *p);
  void visitArg(Arg *p);
  void visitBlk(Blk *p);
  void visitStmt(Stmt *p);
  void visitItem(Item *p);
  void visitSStmt(SStmt *p);
  void visitType(Type *p);
  void visitBracketsOpt(BracketsOpt *p);
  void visitExpr(Expr *p);
  void visitDimExpr(DimExpr *p);
  void visitAddOp(AddOp *p);
  void visitMulOp(MulOp *p);
  void visitRelOp(RelOp *p);
  void visitMAccOp(MAccOp *p);
  void visitProgram(Program *p);
  void visitTypeDef(TypeDef *p);
  void visitStructDef(StructDef *p);
  void visitFnDef(FnDef *p);
  void visitFnDefS(FnDefS *p);
  void visitArgument(Argument *p);
  void visitPtrgument(Ptrgument *p);
  void visitBlock(Block *p);
  void visitEmpty(Empty *p);
  void visitBStmt(BStmt *p);
  void visitDecl(Decl *p);
  void visitDeclStruct(DeclStruct *p);
  void visitNoInit(NoInit *p);
  void visitInit(Init *p);
  void visitAss(Ass *p);
  void visitAssArr(AssArr *p);
  void visitIncr(Incr *p);
  void visitDecr(Decr *p);
  void visitRet(Ret *p);
  void visitVRet(VRet *p);
  void visitCond(Cond *p);
  void visitCondElse(CondElse *p);
  void visitWhile(While *p);
  void visitForLoop(ForLoop *p);
  void visitForStruct(ForStruct *p);
  void visitSExp(SExp *p);
  void visitMInner(MInner *p);
  void visitMArray(MArray *p);
  void visitMSArray(MSArray *p);
  void visitMStruct(MStruct *p);
  void visitInt(Int *p);
  void visitDoub(Doub *p);
  void visitBool(Bool *p);
  void visitVoid(Void *p);
  void visitFun(Fun *p);
  void visitArrayType(ArrayType *p);
  void visitSArrayType(SArrayType *p);
  void visitBracketsEmpty(BracketsEmpty *p);
  void visitENewArray(ENewArray *p);
  void visitENewSArray(ENewSArray *p);
  void visitDim(Dim *p);
  void visitEDot(EDot *p);
  void visitEAcc(EAcc *p);
  void visitENewStruct(ENewStruct *p);
  void visitEMember(EMember *p);
  void visitTypeCast(TypeCast *p);
  void visitELitInt(ELitInt *p);
  void visitELitDoub(ELitDoub *p);
  void visitELitTrue(ELitTrue *p);
  void visitELitFalse(ELitFalse *p);
  void visitEString(EString *p);
  void visitEVar(EVar *p);
  void visitEApp(EApp *p);
  void visitNeg(Neg *p);
  void visitNot(Not *p);
  void visitEMul(EMul *p);
  void visitEAdd(EAdd *p);
  void visitERel(ERel *p);
  void visitEAnd(EAnd *p);
  void visitEOr(EOr *p);
  void visitPlus(Plus *p);
  void visitMinus(Minus *p);
  void visitTimes(Times *p);
  void visitDiv(Div *p);
  void visitMod(Mod *p);
  void visitLTH(LTH *p);
  void visitLE(LE *p);
  void visitGTH(GTH *p);
  void visitGE(GE *p);
  void visitEQU(EQU *p);
  void visitNE(NE *p);
  void visitMAcc(MAcc *p);
  void visitListTopDef(ListTopDef *p);
  void visitListArg(ListArg *p);
  void visitListStmt(ListStmt *p);
  void visitListItem(ListItem *p);
  void visitListSStmt(ListSStmt *p);
  void visitListType(ListType *p);
  void visitListBracketsOpt(ListBracketsOpt *p);
  void visitListDimExpr(ListDimExpr *p);
  void visitListExpr(ListExpr *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};


#endif
